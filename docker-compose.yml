services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:6
    restart: always
    volumes:
      - redis_data:/data # Mount the named volume to the data directory
    ports:
      - "6379:6379" # Expose Redis port if needed for external access/tools

  db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=dating
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  minio:
    image: minio/minio
    command: server /data
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    ports:
      - "9000:9000"
    volumes:
      - minio_data:/data

  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000
    depends_on:
      - db
      - rabbitmq
      - minio
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/dating
      - RABBIT_URL=amqp://guest:guest@rabbitmq:5672/
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - .:/app

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    command: python src/bot/main.py
    depends_on:
      - redis
      - api
    environment:
      - REDIS_URL=redis://redis:6379
      - BOT_TOKEN=${BOT_TOKEN}
    volumes:
      - .:/app

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: python src/worker/main.py
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
    environment:
      - RABBIT_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - .:/app

volumes:
  db_data:
  minio_data:
  redis_data: # Define the named volume for Redis

